"""
Django settings for dmvservice project.
Generated by 'django-admin startproject' using Django 5.1.1.
Docs: https://docs.djangoproject.com/en/5.1/
"""

import os
import sys
from pathlib import Path
from decouple import config, Csv  # read env (.env locally, Heroku config vars in prod)

# Paths
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))  # All apps stored in apps folder

# --- Core security / env ---
SECRET_KEY = config('SECRET_KEY')  # no default; must be set
DEBUG = config('DEBUG', default=False, cast=bool)

# Comma-separated list in env: "your-app.herokuapp.com,example.com,www.example.com"
# In DEBUG, allow everything for convenience.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=Csv()) if not DEBUG else ['*']

# Applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    # Whitenoise: keep runserver_nostatic to avoid double static handling
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',

    'home',
    'django_bootstrap5',
    'captcha',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # Whitenoise must come right after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dmvservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "globalTemplates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI for compatibility (not used when you run daphne), and ASGI for daphne
WSGI_APPLICATION = 'dmvservice.wsgi.application'
ASGI_APPLICATION = 'dmvservice.asgi.application'

# Database (SQLite ok for demo; consider Postgres for real apps on Heroku)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# --- Static files (Heroku-ready) ---
STATIC_URL = 'static/'

# Where collectstatic will put built files (Heroku will serve these)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional static source dirs (yours are fine)
STATICFILES_DIRS = [
    BASE_DIR / "apps/home/static",
    BASE_DIR / "globalStatic",
]

# Whitenoise: hashed filenames + compression
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Logging ---
# On Heroku, prefer stdout instead of writing to files (ephemeral FS).
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {'console': {'class': 'logging.StreamHandler'}},
        'root': {'handlers': ['console'], 'level': 'INFO'},
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {'format': '{levelname} {asctime} {module} {message}', 'style': '{'},
        },
        'handlers': {
            'console': {'class': 'logging.StreamHandler', 'formatter': 'verbose'},
        },
        'root': {'handlers': ['console'], 'level': 'INFO'},
    }
